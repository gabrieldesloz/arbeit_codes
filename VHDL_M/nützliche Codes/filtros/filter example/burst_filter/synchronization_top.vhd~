-------------------------------------------------------------------------------
-- Title      : Testbench for design "k_calculator_test"
-- Project    : 
-------------------------------------------------------------------------------
-- File       : k_calculator_test_tb.vhd
-- Author     :   <alpha@DESLOZ>
-- Company    : 
-- Created    : 2012-06-30
-- Last update: 2012-11-21
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2012 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2012-06-30  1.0      alpha   Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use work.mu320_constants.all;

-------------------------------------------------------------------------------

entity synchronization_top is
  port (
    in_button      : in  std_logic;
    pps            : in  std_logic;
    CLOCK_100MHz   : in  std_logic;
    locked         : out std_logic;
    freq_mclk      : out std_logic;
    pps_out        : out std_logic;
    test_15360_out : out std_logic;
    test_acq_out   : out std_logic;
    mclk           : out std_logic
    ); 

end entity synchronization_top;



-------------------------------------------------------------------------------

architecture synchronization_top_RTL of synchronization_top is



  signal pps_copernicus_edge : std_logic;
  signal n_reset             : std_logic;
  signal pps_reg1            : std_logic;
  signal pps_reg2            : std_logic;
  signal freq_mclk_int       : std_logic;
  signal pps_fault           : std_logic;
  signal freq_out_15360      : std_logic;
  signal in_button_int       : std_logic;



  -- teste aquisição

  signal mdat      : std_logic_vector((N_CHANNELS_ANA-1) downto 0);
  signal mdat1     : std_logic_vector(7 downto 0);  -- (N_CHANNELS_ANA/2)
  signal mdat2     : std_logic_vector(7 downto 0);
  signal qdi_demux : std_logic_vector(3 downto 0);
  signal d_ana     : std_logic_vector((N_CHANNELS_ANA*N_BITS_ADC - 1) downto 0);
  signal d_dig     : std_logic_vector((N_CHANNELS_DIG - 1) downto 0);
  signal d_mon     : std_logic_vector((N_CHANNELS_MON - 1) downto 0);
  signal d_goose   : std_logic_vector((N_GOOSE_INPUTS - 1) downto 0);
  signal reset, digital_available, goose_available, ready_data, d_goose_out, d_mon_out, d_dig_out, d_ana_out, qdi_demux_out: std_logic; 
  signal mclk_int : std_logic;
  
    
begin

  pps_out   <= pps_reg2;
  freq_mclk <= freq_mclk_int;
  mclk      <= mclk_int;

-------------------------------------------------------------------------------
-- tle
-------------------------------------------------------------------------------

  in_button_int <= not in_button;
  test_15360_out <= freq_out_15360;

  synchronization_1 : entity work.synchronization
    port map (
      pps            => pps_fault,      --pps_copernicus_edge,
      n_reset        => n_reset,
      sysclk         => CLOCK_100MHz,
      irig_ok        => '1',
      sync_soc       => freq_mclk_int,
      locked_4800    => locked,
      locked_15360   => open,
      freq_out_15360 => freq_out_15360
      );

-------------------------------------------------------------------------------
-- Teste Aquisicao
-------------------------------------------------------------------------------

  
  acquisition_inst_0 : entity work.acquisition
    port map (
      sysclk            => CLOCK_100MHz, --
      n_reset           => n_reset, --
      sync_soc          => freq_mclk_int,--     
      mclk              => mclk_int,
      mdat              => mdat, --
      qdi_demux         => qdi_demux, --
      qdi_din           => (others => '0'), --
      goose_in          => (others => '0'), --
      en                => '1', --
      d_ana             => d_ana, --
      d_dig             => d_dig, --
      d_mon             => d_mon, -- 
      d_goose           => d_goose, --
      digital_available => digital_available,
      goose_available   => goose_available,
      ready_data        => ready_data);



  -- gerador de numeros pseudo randomicos
  lfsr_1 : entity work.lfsr
    generic map (
      N         => N_CHANNELS_ANA/2,
      WITH_ZERO => 0)
    port map (
      clk   => mclk_int,
      reset => reset,
      q     => mdat1);


  -- gerador de numero pseudo_randomico
  lfsr_2 : entity work.lfsr
    generic map (
      N         => N_CHANNELS_ANA/2,
      WITH_ZERO => 0)
    port map (
      clk   => mclk_int,
      reset => reset,
      q     => mdat2);

  mdat  <= mdat1 & mdat2;
  reset <= not n_reset;


  BIG_OR_qdi_demux : process(qdi_demux)
    variable or_check : std_logic := '0';
  begin
    for i in 0 to 4-2 loop
      or_check := or_check or qdi_demux(i) or qdi_demux(i+1);
    end loop;
    qdi_demux_out <= or_check;
    or_check := '0';
  end process BIG_OR_qdi_demux;


  BIG_OR_d_ana : process(d_ana)
    variable or_check : std_logic := '0';
  begin
    for i in 0 to (N_CHANNELS_ANA*N_BITS_ADC)-2 loop
      or_check := or_check or d_ana(i) or d_ana(i+1);
    end loop;
    d_ana_out <= or_check;
    or_check := '0';
  end process BIG_OR_d_ana;


   BIG_OR_d_dig : process(d_dig)
    variable or_check : std_logic := '0';
  begin
    for i in 0 to N_CHANNELS_DIG-2 loop
      or_check := or_check or d_dig(i) or d_dig(i+1);
    end loop;
    d_dig_out <= or_check;
    or_check := '0';
  end process BIG_OR_d_dig;

  BIG_OR_d_mon : process(d_mon)
    variable or_check : std_logic := '0';
  begin
    for i in 0 to N_CHANNELS_MON-2 loop
      or_check := or_check or d_mon(i) or d_mon(i+1);
    end loop;
    d_mon_out <= or_check;
    or_check := '0';
  end process BIG_OR_d_mon;

     BIG_OR_d_goose : process(d_goose)
    variable or_check : std_logic := '0';
  begin
    for i in 0 to N_GOOSE_INPUTS-2 loop
      or_check := or_check or d_goose(i) or d_goose(i+1);
    end loop;
    d_goose_out <= or_check;
    or_check := '0';
  end process BIG_OR_d_goose;
 

 test_acq_out <=  digital_available or goose_available or ready_data or d_goose_out or d_mon_out or d_dig_out or d_ana_out or qdi_demux_out;
    

-------------------------------------------------------------------------------
-- on_off_switch
-------------------------------------------------------------------------------

  on_off_switch_top_1 : entity work.on_off_switch_top
    generic map (
      DEBOUNCE_MAX => 200)
    port map (
      in_button  => in_button_int,
      clock      => CLOCK_100MHz,
      n_reset    => n_reset,
      in_signal  => pps_copernicus_edge,
      out_signal => pps_fault);


--sicronizador do sinal do gps - copernicus
  process(CLOCK_100MHz, n_reset)
  begin
    if (n_reset = '0') then
      pps_reg1 <= '0';
      pps_reg2 <= '0';
    elsif rising_edge(CLOCK_100MHz) then
      pps_reg1 <= pps;
      pps_reg2 <= pps_reg1;
    end if;
  end process;


  -- detector de bordas do sinal do copernicus
  edge_detector_inst1 : entity work.edge_detector
    port map (
      n_reset  => n_reset,
      sysclk   => CLOCK_100MHz,
      f_in     => pps_reg2,
      pos_edge => pps_copernicus_edge
      );


    
-------------------------------------------------------------------------------
-- gerador de reset
-------------------------------------------------------------------------------
  reset_generator_1 : entity work.reset_generator
    generic map (
      MAX => 100)
    port map (
      clk     => CLOCK_100MHz,
      n_reset => n_reset);


end architecture synchronization_top_RTL;

