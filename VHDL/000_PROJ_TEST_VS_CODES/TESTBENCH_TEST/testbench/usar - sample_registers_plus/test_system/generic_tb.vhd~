
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- test packages
--use work.RandomBasePkg.all;
--use work.RandomPkg.all;
--use work.CoveragePkg.all;
--use ieee.math_real.all;

-------------------------------------------------------------------------------

entity generic_tb is


end generic_tb;

-------------------------------------------------------------------------------

architecture generic_tb_rtl of generic_tb is


  -- component ports
  -- clock
  constant clock_linux_period : time := 40 ns;
  constant sys_clk_period     : time := 10 ns;
  constant clock_stim_period  : time := 200 ns;


-- uut signals

  signal sysclk             : std_logic                     := '0';
  signal clock_linux        : std_logic                     := '0';
  signal clock_stim         : std_logic                     := '0';
  signal clock_stim_b       : std_logic                     := '0';
  signal reset_n            : std_logic;
  signal avs_read           : std_logic;
  signal avs_address        : std_logic_vector(1 downto 0);
  signal avs_chipselect     : std_logic                     := '0';
  signal avs_write          : std_logic                     := '0';
  signal avs_writedata      : std_logic_vector(31 downto 0) := x"00000000";
  signal avs_readdata       : std_logic_vector(31 downto 0);
  signal coe_data_input     : std_logic_vector(127 downto 0);
  signal coe_data_output    : std_logic_vector(127 downto 0);
  signal coe_data_ready_in  : std_logic                     := '0';
  signal coe_data_ready_out : std_logic;
  

  
begin


  -- clock generation
  clock_linux  <= not clock_linux      after clock_linux_period/2;
  sysclk       <= not sysclk           after sys_clk_period/2;
  clock_stim   <= not clock_stim       after clock_stim_period/2;
  clock_stim_b <= transport clock_stim after sys_clk_period/2;

  -- component instantiation


  phase_sum_1 : entity work.phase_sum
    generic map (
      COE_IN_OUT_BITS      => 128,
      N_CHANNELS_ANA_BOARD => 8)
    port map (
      clk                => clock_linux,
      reset_n            => reset_n,
      avs_read           => '0',
      avs_address        => "00",
      avs_chipselect     => avs_chipselect,
      avs_write          => avs_write,
      avs_writedata      => avs_writedata,  --  x"00000000",
      avs_readdata       => open,
      coe_data_input     => coe_data_input,
      coe_data_output    => open,
      coe_data_ready_in  => coe_data_ready_in,
      coe_data_ready_out => coe_data_ready_out,
      coe_sysclk         => sysclk);



  p_random_generic_1 : entity work.p_random_generic
    generic map (
      SEED => 666,
      N    => 128)
    port map (
      clk         => clock_stim_b,
      n_reset     => reset_n,
      random_vect => coe_data_input);


  -- gera um pulso de sys_clk_period quando ocorre uma mudança em
  -- coe_data_input
  stimuli : process
  begin
    wait until coe_data_input'event;
    coe_data_ready_in <= '1';
    wait for sys_clk_period;
    coe_data_ready_in <= '0';
  end process;


  -- controle nios
  WaveGen_Proc : process
  begin
    wait until reset_n = '1';
    wait for 3 ms;
    wait until clock_linux = '1';
    avs_write      <= '1';
    avs_chipselect <= '1';
    avs_writedata  <= x"0000000" & "000" & '1';
    wait for 2*clock_linux_period;
    avs_write      <= '0';
    avs_chipselect <= '0';
    avs_writedata  <= x"0000000" & "000" & '0';
    wait for 3 ms;
    wait until clock_linux = '1';
    avs_write      <= '1';
    avs_chipselect <= '1';
    avs_writedata  <= x"0000000" & "000" & '0';
    wait for 2*clock_linux_period;
    avs_write      <= '0';
    avs_chipselect <= '0';
    avs_writedata  <= x"0000000" & "000" & '0';
    wait for 3 ms;
    wait until clock_linux = '1';
    avs_write      <= '1';
    avs_chipselect <= '1';
    avs_writedata  <= x"0000000" & "000" & '1';
    wait for 2*clock_linux_period;
    avs_write      <= '0';
    avs_chipselect <= '0';
    avs_writedata  <= x"0000000" & "000" & '0';
    wait for 3 ms;    
    
  end process;








-------------------------------------------------------------------------------
-- gerador de reset
-------------------------------------------------------------------------------
  reset_generator_1 : entity work.reset_generator
    generic map (
      MAX => 100)
    port map (
      clk     => sysclk,
      n_reset => reset_n
      );


end generic_tb_rtl;

-------------------------------------------------------------------------------



-------------------------------------------------------------------------------
-- exemplo clock com jitter - bilbioteca math_real
-------------------------------------------------------------------------------
--signal d : time := 0 ns;
--signal clock : std_logic := '0';
--signal sys_clk : std_logic := '0';
--constant SYS_CLK_PERIOD: time:= 10 ns;


--  sys_clk_process:  process
--    -- variables for uniform
--     variable seed1, seed2 : positive;
--     variable r : real;
--     variable int_rand : integer;

--  begin
--    int_rand := integer(trunc(r*3.0));
--    uniform(seed1, seed2, r);
--    d <= int_rand * 1 ns;
--    wait for SYS_CLK_PERIOD/2;
--    clock <= '0';
--    wait for SYS_CLK_PERIOD/2;
--    clock <= '1'; 
--end process;

--sys_clk <= transport clock after d ;



-----------------------------------------------------------------------------------------------
-- Testbench Clock Generation
-----------------------------------------------------------------------------------------------
--clk_gen : process
--begin
--   loop
--       clk<='0' ,
--           '1'  after HALF_CYCLE;
--       wait for HALF_CYCLE*2;
--   end loop;
--end process;



-----------------------------------------------------------------------------------------------
-- Output text file
-----------------------------------------------------------------------------------------------
--testbench_o : process(clk) 
--file sin_file                 : text open write_mode is "fsin_o_vhdl_nco_altera.txt";
--variable ls                   : line;
--variable sin_int      : integer ;

--  begin
--    if rising_edge(clk) then
--      if(reset_n='1' and out_valid='1') then
--        sin_int := conv_integer(sin_val);
--        write(ls,sin_int);
--        writeline(sin_file,ls);
--     end if;          
--      end if;         
--end process testbench_o;

-----------------------------------------------------------------------------------------------
-- Geraçao de estimulos -  exemplos 
-----------------------------------------------------------------------------------------------


--wait on teste;
--wait until x = 5; -- espera ate que a condição x = 5 seja verdadeira (espera
--mudança)
--wait for 25 ns;
--wait until now = t;
--wait on s until p = '1' for t;  -- espera mudança em s enquanto p diferente de '1', ou até t
--wait on s until s = '1' – rising_edge



--WaveGen_Proc : process
--begin
--  wait until n_reset = '1';
--  n_point_samples <= "10000000000";     -- 1024
--  for i in 1 to maxN_Points+1 loop      -- manda 1025 amostras
--    wait for sys_clk_period;
--    data_input     <= x"FFFFFFFF";
--    wait for sys_clk_period;
--    data_available <= '1';
--    wait for sys_clk_period;
--    data_available <= '0';
--  end loop;
--  wait for 1 ms;
--end process;


--WaveGen_Proc : process
--begin
--  wait until n_reset = '1';
--  n_point_samples <= "00000000010";     -- 2 amostras
--  for i in 1 to maxN_Points+1 loop      -- manda 3 amostras
--    wait for sys_clk_period;
--    data_input     <= x"00000005";
--    wait for sys_clk_period;
--    data_available <= '1';
--    wait for sys_clk_period;
--    data_available <= '0';
--  end loop;
--  wait for 1 ms;
--end process;



--Char: std_logic_vector(c-1 downto 0):= (OTHERS => '0');
--...
--gen_stimuli1: process
--      begin     
--              for i in 0 to (2**c)-1 loop
--                      char <= std_logic_vector(unsigned(char) + 1);
--              end loop;  
--              wait for 10 ns;  
--end process; 
--...


--Geraçao de relogio com razao ciclica diferente de 0,5 – exemplo

--...
--constant PERIOD: TIME := 1 ms; 
--constant DUTY_CYCLE: REAL := 0.4; 
--...

--clock: process
--      begin
--      clockdiv <= '0';
--      wait for (PERIOD-(PERIOD*DUTY_CYCLE));
--      clockdiv <= '1';
--      wait for (PERIOD*DUTY_CYCLE);
--end process;


-- geração de um pulso com tamanho e periodicidade ajustaveis

--...
--constant PERIOD: TIME := 1 ms; 
--constant PULSE_PERIOD: TIME := 10 ns; 
--...

--clock: process
--      begin
--      clockdiv <= '0';
--      wait for (PERIOD-PULSE_PERIOD);
--      clockdiv <= '1';
--      wait for (PULSE_PERIOD);
--end process;


-----------------------------------------------------------------------------------------------
-- Monitoramento da saida
-----------------------------------------------------------------------------------------------
--monitor : process
--begin
--  wait until rising_edge(a);
--  wait for 2 ns;                        -- simulacao do atraso de propagacao
--  case cont_vect is
--    when 1      => assert y = '0' report "y diferente do valor esperado" severity warning;
--    when 2      => assert y = '1' report "y diferente do valor esperado" severity warning;
--    when 3      => assert y = '0' report "y diferente do valor esperado" severity warning;
--    when 4      => assert y = '0' report "y diferente do valor esperado" severity warning;
--    when others => null;
--  end case;

--end process monitor;


--process
--begin
--      assert a = b 
--              report "a e b não são iguais"
--                      severity WARNING;
--      wait on a,b;
--end process;



configuration generic_tb_rms_tb_rtl_cfg of generic_tb is
  for generic_tb_rtl
  end for;
end generic_tb_rms_tb_rtl_cfg;
