-------------------------------------------------------------------------------
-- $Id:
-- $URL:
-- Title      : Synchronization Module  
-- Project    : protective relay
-------------------------------------------------------------------------------
-- File       : divider.vhd
-- Author     : Gabriel Deschamps Lozano
-- Company    : Reason Tecnologia S.A.
-- Created    : 2012-08-01
-- Last update: 2013-01-24
-- Platform   : 
-- Standard   : 
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2011/2012 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2012-09-03   1.0      GDL     Revised 
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity parallel_mult is
  generic (
    N : natural  
    );

  port (
    sysclk  : in  std_logic;
    n_reset : in  std_logic;
    start   : in  std_logic;
    ready   : out std_logic;
    a       : in  std_logic_vector(3 downto 0);
    b       : in  std_logic_vector(3 downto 0);
    c       : out std_logic_vector(7 downto 0)
    );


end entity parallel_mult;

architecture rd_RTL of parallel_mult is

  type STATE_TYPE is (IDLE, LOAD, MULT, SUBT, CHECK, DONE);

  attribute syn_encoding               : string;
  attribute syn_encoding of state_type : type is "safe";


  -- signal declarations

  signal div_p1 : unsigned(c'range);
  signal div_p2 : unsigned(c'range);

  
begin  -- architecture rd_RTL



  process (n_reset, sysclk)
  begin
    if (n_reset = '0') then
      state_reg <= IDLE;
    elsif rising_edge (sysclk) then
      state_reg <= state_next;
    end if;
  end process;


  state_machine : process(all) is
  begin  -- process state_machine

    ready <= '0';

    state_next <= state_reg;


    case state_reg is

      when IDLE =>
        if start = '1' then
          state_next <= MULT_PARC;
        end if;
        

      when LOAD =>
        state_next <= MULT_PARC;
        

      when MULT_PARC =>

        
        div_p1 <= resize(unsigned(b(1 downto 0)), 2*N) * resize(unsigned(a), 2*N);

        div_p2 <= resize(unsigned(b(3 downto 2)), 2*N) * resize(unsigned(a), 2*N);
        
        
      when ADD_PARC =>
        
        c <= div_p1 + (div_p2 sll 2);

      when DONE =>
        ready      <= '1';
        state_next <= IDLE;

      when others =>
        state_next <= IDLE;

        
    end case;
  end process state_machine;




end architecture;

