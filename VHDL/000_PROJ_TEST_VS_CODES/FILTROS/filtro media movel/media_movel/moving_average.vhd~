
-------------------------------------------------------------------------------
-- coding designguidelines
-- 
--
--
--
--
--
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity moving_average_filter is
  
  generic (
    MEM_BUFFER_SIZE : natural := 20;
    SAMPLE_SIZE     : natural := 32
    ); 

  port (

    sysclk      : in  std_logic;
    n_reset     : in  std_logic;
    sample_i    : in  std_logic_vector(SAMPLE_SIZE-1 downto 0);
    read_req_i  : in  std_logic;
    write_req_i : in  std_logic;
    sample_out  : out std_logic_vector(SAMPLE_SIZE-1 downto 0);
    writing     : out std_logic;
    reading     : out std_logic

    );

end moving_average_filter;


architecture moving_average_ARQ of moving_average_filter is


  type MEM_BUFFER is array (0 to MEM_BUFFER_SIZE-1) of unsigned(SAMPLE_SIZE-1 downto 0);
  type STATE_TYPE is (START_RST, DECODE_REQ, WRITE_ST, READ_ST);

  signal m_freq_buffer                 : MEM_BUFFER;
  attribute syn_encoding               : string;
  attribute syn_encoding of STATE_TYPE : type is "safe";

  signal state_reg, state_next           : STATE_TYPE;
  signal write_ptr_next                  : natural range 0 to MEM_BUFFER_SIZE-1;
  signal write_ptr_reg                   : natural range 0 to MEM_BUFFER_SIZE-1;
  signal mem_ptr_reg                     : natural range 0 to MEM_BUFFER_SIZE-1;
  signal mem_ptr_next                    : natural range 0 to MEM_BUFFER_SIZE-1;
  signal f_write                         : std_logic;
  signal sample_next, sample_reg         : unsigned(SAMPLE_SIZE-1 downto 0);
  signal sample_out_next, sample_out_reg : unsigned(SAMPLE_SIZE-1 downto 0);
  signal m_freq_mem                      : unsigned(SAMPLE_SIZE-1 downto 0);

  
begin
  
  process (n_reset, sysclk) is
  begin
    if (n_reset = '0') then
      sample_reg     <= (others => '0');
      mem_ptr_reg    <= 0;
      write_ptr_reg  <= 0;
      state_reg      <= START_RST;
      writing_reg    <= '0';
      reading_reg    <= '0';
      sample_out_reg <= (others => '0');
    elsif rising_edge(sysclk) then
      sample_out_reg <= sample_out_next;
      writing_reg    <= writing_next;
      reading_reg    <= reading_next;
      new_sample_reg <= new_sample_next;
      sample_reg     <= sample_next;
      mem_ptr_reg    <= mem_ptr_next;
      write_ptr_reg  <= write_ptr_next;
      state_reg      <= state_next
    end if;
  end process;


  sample_out  <= sample_out_reg
  writing     <= writing_reg;
  reading     <= reading_reg;
  sample_next <= unsigned(sample_i);

  process(mem_ptr_reg,
          sample_reg,
          state_reg,
          write_ptr_reg)

  begin
    mem_ptr_next   <= mem_ptr_reg;
    write_ptr_next <= write_ptr_reg;
    m_freq_int     <= (others => '0');
    f_write        <= '0';
    state_next     <= state_reg;
    writing_next   <= writing_reg;
    reading_next   <= reading_reg;
    sample_out_next <= 

    case state_reg is
      
      when START_RST =>
        mem_ptr_next   <= 0;
        write_ptr_next <= 0;
        read_ptr_next  <= 0;
        state_next     <= WAIT_NEW_SAMPLE;

      when DECODE_REQ =>
        writing_next <= '0';
        reading_next <= '0';

        if write_req = '1' then
          state_next   <= WRITE_ST;
          f_write = '1';
          writing_next <= '1';
          m_sample_int <= sample_reg;
          mem_ptr_next <= write_ptr_reg;
          state_next   <= WRITE_ST;
        end if;

        if read_req = '1' then
          state_next   <= READ_ST;
          reading_next <= '1';
          mem_ptr_next <= write_ptr_reg;
          state_next   <= WRITE_ST;
        end if;
        

      when WRITE_ST =>

        if write_ptr_reg = MEM_BUFFER_SIZE-1 then
          write_ptr_next <= 0;
        else
          write_ptr_next <= write_ptr_reg + 1;
        end if;

        state_next <= DECODE_REQ;

      when READ_ST =>

        if read_ptr_reg = MEM_BUFFER_SIZE-1 then
          read_ptr_next <= 0;
        else
          read_ptr_next <= read_ptr_reg + 1;
        end if;


        sample_out_next <= m_freq_mem;
        state_next <= DECODE_REQ;

        
        

      when others =>
        state_next <= START_RST;
    end case;
  end process;



--* --------------------------------------------------------------------------------------------------------------------------------------
--* Dual-Port RAM generation
--* Generate the simple dual-port RAM
--* Input      : 
--* Output     : d_out
--* Latency    : 1
--* Multicycle : NO
--* --------------------------------------------------------------------------------------------------------------------------------------

  process(sysclk)
  begin
    if rising_edge(sysclk) then
      if (f_write = '1') then
        m_freq_buffer(mem_pointer_reg) <= m_sample_int;
      end if;
      m_freq_mem <= m_freq_buffer(mem_pointer_reg);
    end if;
  end process;



------------------------------------------------------------------------------
-- valor medio
-------------------------------------------------------------------------------

  


  
end moving_average_ARQ;

