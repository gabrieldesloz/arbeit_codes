-------------------------------------------------------------------------------
-- Title      : Testbench for design "arith_ctrl"
-- Project    : 
-------------------------------------------------------------------------------
-- File       : arith_ctrl_tb.vhd
-- Author     :   <gdl@IXION>
-- Company    : 
-- Created    : 2013-08-27
-- Last update: 2013-08-29
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2013 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2013-08-27  1.0      gdl     Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



-------------------------------------------------------------------------------

entity arith_ctrl_tb is

end entity arith_ctrl_tb;

-------------------------------------------------------------------------------

architecture RTL of arith_ctrl_tb is


  -- clock constants
  constant SYS_CLK_PERIOD : time := 10 ns;  -- 100 MHz

  -- component generics

  constant SAMPLE_SIZE     : natural := 32;
  constant MEM_BUFFER_SIZE : natural := 4;
  constant ACC_BITS        : natural := 8;

  -- component ports
  signal sysclk           : std_logic                                         := '0';
  signal reset_n          : std_logic                                         := '0';
  signal data_input_i     : std_logic_vector(SAMPLE_SIZE-1 downto 0)          := (others => '0');
  signal data_input_o     : std_logic_vector(SAMPLE_SIZE+ACC_BITS-1 downto 0) := (others => '0');
  signal data_available_i : std_logic                                         := '0';


  -- component ports
  signal d_ana_proc_o      : std_logic_vector((2*SAMPLE_SIZE)-1 downto 0)          := (others => '0');
  signal d_ana_i           : std_logic_vector((2*SAMPLE_SIZE)+ACC_BITS-1 downto 0) := (others => '0');
  signal one_division_done : std_logic                                             := '0';
  signal ready             : std_logic                                             := '0';
  signal arith_ctrl_ready  : std_logic;

  
begin  -- architecture RTL



  sysclk <= not sysclk after SYS_CLK_PERIOD/2;



  divider_mux_tb_1 : entity work.divider_mux_tb
    port map (
      sysclk            => sysclk,
      reset_n           => reset_n,
      d_ana_proc_o      => d_ana_proc_o,
      one_division_done => one_division_done,
      ready             => ready);  


  data_available_i <= ready;
  data_input_i     <= d_ana_proc_o(31 downto 0);




  DUT : entity work.arith_ctrl
    generic map (
      MEM_BUFFER_SIZE => MEM_BUFFER_SIZE,
      SAMPLE_SIZE     => SAMPLE_SIZE,
      ACC_BITS        => 8)
    port map (
      sysclk           => sysclk,
      reset_n          => reset_n,
      data_i           => data_input_i,
      data_o           => data_input_o,
      data_available_i => data_available_i,
      ready            => arith_ctrl_ready
      );




  d_ana_i((2*(SAMPLE_SIZE+ACC_BITS))-1 downto (SAMPLE_SIZE+ACC_BITS)) <= data_input_o;
  d_ana_i((SAMPLE_SIZE+ACC_BITS)-1 downto 0)                          <= std_logic_vector(to_unsigned(4, (SAMPLE_SIZE+ACC_BITS)));



  divider_mux_1 : entity work.divider_mux
    generic map (
      N_CHANNELS_ANA => 2,
      N_BITS_ADC     => SAMPLE_SIZE+ACC_BITS)
    port map (
      sysclk            => sysclk,
      n_reset           => reset_n,
      d_ana_i           => d_ana_i,
      d_ana_proc_o      => open,
      ready_data_o      => open,
      start_div_i       => arith_ctrl_ready,
      one_division_done => open);






-------------------------------------------------------------------------------
-- gerador de reset
-------------------------------------------------------------------------------
  reset_generator_1 : entity work.reset_generator
    generic map (
      MAX => 100)
    port map (
      clk     => sysclk,
      n_reset => reset_n
      );






end architecture RTL;
