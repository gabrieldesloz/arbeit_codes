-------------------------------------------------------------------------------
-- Title : Memoria circular
-- Project : Merging Unit - TECO
-- File : circular_buffer.vhd
-- Author : Gabriel Deschamps Lozano
-- Company : Reason Tecnologia S.A.
-- Created : 2013-08-27
-- Last update : 2013-08-27
-- Target Device :
-- Standard : VHDL'93
-------------------------------------------------------------------------------
-- Description : Memoria Circular
-------------------------------------------------------------------------------
-- Copyright (c) 2013
-- Revisions :
-- Date       Version Author Description
-- 2013-08-27 1.0     GDL    Created
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

entity arith_ctrl is
  
  generic (
    MEM_BUFFER_SIZE : natural := 20;
    SAMPLE_SIZE     : natural := 32
    ); 

  port (

    sysclk           : in  std_logic;
    reset_n          : in  std_logic;
    data_input_i     : in  std_logic_vector(SAMPLE_SIZE-1 downto 0);
    data_input_o     : out std_logic_vector(SAMPLE_SIZE-1 downto 0);
    data_available_i : in  std_logic

    );

end arith_ctrl;


architecture arith_ctrl_ARQ of arith_ctrl is

  type STATE_TYPE is (IDLE, WRITE_ST, READ_CTRL);
  signal state_reg, state_next                   : STATE_TYPE;
  signal data_input_next, data_input_reg         : std_logic_vector(SAMPLE_SIZE-1 downto 0);
  signal data_available_reg, data_available_next : std_logic;


  signal read_req_i  : std_logic;
  signal write_req_i : std_logic;
  signal sample_i    : std_logic_vector(SAMPLE_SIZE-1 downto 0);
  signal sample_o    : std_logic_vector(SAMPLE_SIZE-1 downto 0);
  signal write_ptr_o : std_logic_vector(CEIL(LOG(MEM_BUFFER_SIZE,2.0))-1 downto 0);
  signal read_ptr_o  : std_logic_vector(CEIL(LOG(MEM_BUFFER_SIZE,2.0))-1 downto 0);
  signal writing_o   : std_logic;
  signal reading_o   : std_logic;
  
  
begin
  
  process (reset_n, sysclk) is
  begin
    if (reset_n = '0') then
      state_reg          <= IDLE;
      data_available_reg <= '0';
      data_input_reg     <= (others => '0');
    elsif rising_edge(sysclk) then
      data_input_reg     <= data_input_next;
      data_available_reg <= data_available_next;
      state_reg          <= state_next;
    end if;
  end process;


  -- registrando as entradas
  -- converte std_logiv_vector para unsigned
  data_available_next <= data_available_i;
  data_input_next     <= data_input_i;





  main_fsm : process(data_available_reg, data_input_reg, reading_o, state_reg)

  begin


    write_req_i <= '0';
    state_next  <= state_reg;
    sample_i    <= (others => '0');
    read_req_i  <= '0';

    case state_reg is

      when IDLE =>

        if data_available_reg = '1' then
          sample_i    <= data_input_reg;
          state_next  <= WRITE_ST;
          write_req_i <= '1';
        end if;
        

      when WRITE_ST =>
        state_next <= READ_CTRL;

      when READ_CTRL =>
        if reading_o = '0' then
          read_req_i <= '1';
        end if;



      when others =>
        state_next <= IDLE;
    end case;
  end process;



  circular_buffer_1 : entity work.circular_buffer
    generic map (
      MEM_BUFFER_SIZE => MEM_BUFFER_SIZE,
      SAMPLE_SIZE     => SAMPLE_SIZE)
    port map (
      sysclk      => sysclk,
      reset_n     => reset_n,
      read_req_i  => read_req_i,
      write_req_i => write_req_i,
      sample_i    => sample_i,
      sample_o    => sample_o,
      writing_o   => writing_o,
      reading_o   => reading_o
      read_ptr_o  => read_ptr_o,
      write_ptr_o => write_ptr_o
      );



end arith_ctrl_ARQ;

